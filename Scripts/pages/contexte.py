import streamlit as st
import pandas as pd

def show():
    st.markdown("## üìä Contexte et Exploration des Donn√©es")
    
    # Bloc d'introduction
    st.markdown("""
    <div class="info-card">
        <h3>‚ÑπÔ∏è √Ä propos des donn√©es</h3>
        <p>Les donn√©es pr√©sent√©es ici concernent la performance √©nerg√©tique des logements en France, 
        r√©cup√©r√©es depuis le site officiel <a href='https://www.data.gouv.fr' target='_blank'>data.gouv.fr</a>.</p>
        <p>Vous pouvez explorer et filtrer ces donn√©es directement depuis cette interface.</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Chargement du CSV
    df = pd.read_csv("data/enedis_69.csv", sep=';', encoding='utf-8')
    
    st.markdown("### üîç Exploration des donn√©es")
    
    # Encadr√© filtres d√©roul√© par d√©faut
    with st.expander("Filtres", expanded=True):
        col_to_filter = st.selectbox("Choisissez la colonne √† filtrer", df.columns)
        
        filtered_df = df.copy()
        
        if df[col_to_filter].dtype == "object":
            unique_vals = df[col_to_filter].dropna().unique().tolist()
            selected_vals = st.multiselect(f"Valeurs de {col_to_filter} √† afficher", unique_vals)
            
            if selected_vals:
                filtered_df = filtered_df[filtered_df[col_to_filter].isin(selected_vals)]
            else:
                st.warning("‚ö†Ô∏è Veuillez s√©lectionner la valeur souhait√©e pour votre filtre")
                filtered_df = pd.DataFrame()
        
        elif pd.api.types.is_numeric_dtype(df[col_to_filter]):
            min_val = float(df[col_to_filter].min())
            max_val = float(df[col_to_filter].max())
            if min_val < max_val:
                selected_range = st.slider(f"Plage de {col_to_filter}", min_val, max_val, (min_val, max_val))
                filtered_df = filtered_df[(filtered_df[col_to_filter] >= selected_range[0]) & (filtered_df[col_to_filter] <= selected_range[1])]
            else:
                st.write(f"{col_to_filter} : {min_val}")
    
    # Affichage de la table filtr√©e
    if not filtered_df.empty:
        # Bouton pour t√©l√©charger les donn√©es filtr√©es
        csv = filtered_df.to_csv(index=False, sep=';').encode('utf-8')
        st.download_button(
            label="üì• T√©l√©charger les donn√©es filtr√©es",
            data=csv,
            file_name='dpe_filtered.csv',
            mime='text/csv'
        )
        
        n_rows = st.number_input(
            "Nombre de lignes √† afficher",
            min_value=1,
            max_value=len(filtered_df),
            value=min(10, len(filtered_df))
        )
        st.dataframe(filtered_df.head(n_rows), use_container_width=True)
    else:
        st.info("Aucune donn√©e √† afficher pour ce filtre.")
    
    st.markdown("---")
    
    # Bloc p√©dagogique
    st.markdown("""
    <div class="info-card">
        <h3>üí° Utilisation de cette section</h3>
        <ul>
            <li>Explorer les donn√©es DPE pour diff√©rents types de logements et r√©gions</li>
            <li>Filtrer selon la colonne de votre choix et les valeurs associ√©es</li>
            <li>La table affich√©e se met √† jour automatiquement selon votre filtre</li>
            <li>Vous pouvez t√©l√©charger les donn√©es filtr√©es avec le bouton ci-dessus</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)
